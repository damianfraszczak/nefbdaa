{"version":3,"sources":["webpack:///./src/app/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/register/register.component.html","webpack:///./src/app/auth/register/register.component.ts","webpack:///./src/app/auth/reset/reset-password.component.html","webpack:///./src/app/auth/reset/reset-password.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAuC;AACc;AACY;AACP;AACS;AACQ;AAEpE,IAAM,MAAM,GAAW;IAC5B;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,6DAAe;QAC1B,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,EAAE;gBACR,UAAU,EAAE,OAAO;aACpB;YACD;gBACE,IAAI,EAAE,OAAO;gBACb,SAAS,EAAE,wEAAiB;aAC7B;YACD;gBACE,IAAI,EAAE,UAAU;gBAChB,SAAS,EAAE,iFAAoB;aAChC;YACD;gBACE,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,+DAAiB;aAC7B;YACD;gBACE,IAAI,EAAE,kBAAkB;gBACxB,SAAS,EAAE,yFAAyB;aACrC;SACF;KACF;CACF,CAAC;AAMF;IAAA;IACA,CAAC;IADY,oBAAoB;QAJhC,8DAAQ,CAAC;YACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SACxB,CAAC;OACW,oBAAoB,CAChC;IAAD,2BAAC;CAAA;AADgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCY;AACN;AACI;AACE;AAEc;AAChB;AACoB;AACL;AACS;AACQ;AACxB;AAoBnD;IAAA;IACA,CAAC;IADY,aAAa;QAjBzB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,4DAAY;gBACZ,4DAAa;gBACb,+DAAgB;gBAChB,yEAAoB;gBACpB,0DAAY;gBACZ,gEAAW;aACZ;YACD,YAAY,EAAE;gBACZ,wEAAiB;gBACjB,iFAAoB;gBACpB,yFAAyB;aAC1B;SACF,CAAC;OACW,aAAa,CACzB;IAAD,oBAAC;CAAA;AADyB;;;;;;;;;;;;AC/B1B,yYAAyY,SAAS,sTAAsT,WAAW,qtEAAqtE,yDAAyD,iBAAiB,yDAAyD,+/BAA+/B,oBAAoB,sOAAsO,oBAAoB,qO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAtwI;AACe;AACJ;AAK7D;IAAuC,qCAAgB;IAAvD;;IA4BA,CAAC;IAxBC,oCAAQ,GAAR;QAAA,iBAQC;QAPC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,UAAC,KAAK;YAC3C,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE;gBACnB,IAAM,WAAS,GAAG,6EAAwB,CAAC,WAAW,CAAC,IAAI,kBAAkB,CAAC;gBAC9E,2BAA2B;gBAC3B,UAAU,CAAC,cAAQ,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;aAChE;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAQ,GAAR,UAAS,KAAU;QACjB,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,WAAW,EAAE;YAC5C,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC/E;IACH,CAAC;IAED,0CAAc,GAAd;QACE,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjG,CAAC;IAED,0CAAc,GAAd;QACE,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;IACnG,CAAC;IA1BU,iBAAiB;QAJ7B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;SAEtB,CAAC;OACW,iBAAiB,CA4B7B;IAAD,wBAAC;CAAA,CA5BsC,8DAAgB,GA4BtD;AA5B6B;;;;;;;;;;;;ACP9B,2UAA2U,SAAS,8NAA8N,WAAW,8kCAA8kC,wDAAwD,iBAAiB,wDAAwD,slCAAslC,uDAAuD,iBAAiB,uDAAuD,65DAA65D,yDAAyD,iBAAiB,yDAAyD,krDAAkrD,oBAAoB,0PAA0P,oBAAoB,gP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA14N;AACO;AAC3C;AAMvC;IAA0C,wCAAmB;IAK3D,8BAC+B,OAAsB,EACG,OAAY,EAC9C,EAAqB,EACZ,MAAc;QAFW,sCAAY;QAFpE,YAKE,kBAAM,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,MAAM,CAAC,SACpC;QAL8B,aAAO,GAAP,OAAO,CAAe;QACG,aAAO,GAAP,OAAO,CAAK;QAC9C,QAAE,GAAF,EAAE,CAAmB;QACZ,YAAM,GAAN,MAAM,CAAQ;;IAE7C,CAAC;IAED,uCAAQ,GAAR;IAEA,CAAC;IAIM,uCAAQ,GAAf,UAAgB,KAAU;QACxB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,eAAe,EAAE;YAC5C,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACjF;IACH,CAAC;IAvBU,oBAAoB;QAJhC,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;;SAEzB,CAAC;QAQa,uEAAM,CAAC,6DAAe,CAAC;yCADI,2DAAa,UAE3B,+DAAiB;YACJ,sDAAM;OATlC,oBAAoB,CAwBhC;IAAD,2BAAC;CAAA,CAxByC,iEAAmB,GAwB5D;AAxBgC;;;;;;;;;;;;ACRjC,8gBAA8gB,SAAS,8NAA8N,WAAW,mTAAmT,EAAE,wgBAAwgB,EAAE,8xC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAvhD;AACiB;AAMzD;IAA+C,6CAA0B;IAAzE;;IASA,CAAC;IALQ,4CAAQ,GAAf,UAAgB,KAAU;QACxB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,eAAe,EAAE;YAC5C,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC/E;IACH,CAAC;IARU,yBAAyB;QAJrC,+DAAS,CAAC;YACT,QAAQ,EAAE,2BAA2B;;SAEtC,CAAC;OACW,yBAAyB,CASrC;IAAD,gCAAC;CAAA,CAT8C,wEAA0B,GASxE;AATqC","file":"auth-auth-module.js","sourcesContent":["import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {NbAuthComponent, NbLogoutComponent} from '@nebular/auth';\r\nimport {NgxLoginComponent} from './login/login.component';\r\nimport {NgxRegisterComponent} from './register/register.component';\r\nimport {NgxResetPasswordComponent} from './reset/reset-password.component';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: NbAuthComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: 'login',\r\n      },\r\n      {\r\n        path: 'login',\r\n        component: NgxLoginComponent,\r\n      },\r\n      {\r\n        path: 'register',\r\n        component: NgxRegisterComponent,\r\n      },\r\n      {\r\n        path: 'logout',\r\n        component: NbLogoutComponent,\r\n      },\r\n      {\r\n        path: 'request-password',\r\n        component: NgxResetPasswordComponent,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class NgxAuthRoutingModule {\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {NgModule} from '@angular/core';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {RouterModule} from '@angular/router';\r\n\r\nimport {NgxAuthRoutingModule} from './auth-routing.module';\r\nimport {NbAuthModule} from '@nebular/auth';\r\nimport {NbAlertModule, NbCheckboxModule} from '@nebular/theme';\r\nimport {NgxLoginComponent} from './login/login.component';\r\nimport {NgxRegisterComponent} from './register/register.component';\r\nimport {NgxResetPasswordComponent} from './reset/reset-password.component';\r\nimport {ThemeModule} from '../@theme/theme.module';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    NbAlertModule,\r\n    NbCheckboxModule,\r\n    NgxAuthRoutingModule,\r\n    NbAuthModule,\r\n    ThemeModule,\r\n  ],\r\n  declarations: [\r\n    NgxLoginComponent,\r\n    NgxRegisterComponent,\r\n    NgxResetPasswordComponent,\r\n  ],\r\n})\r\nexport class NgxAuthModule {\r\n}\r\n","module.exports = \"<h1 id=\\\"title\\\" class=\\\"title\\\">Login</h1>\\r\\n<p class=\\\"sub-title\\\">Hello! Log in with your email.</p>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\r\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\r\\n  <ul class=\\\"alert-message-list\\\">\\r\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\r\\n  </ul>\\r\\n</nb-alert>\\r\\n\\r\\n<form (ngSubmit)=\\\"login()\\\" #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\r\\n\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-email\\\">Email address:</label>\\r\\n    <input nbInput\\r\\n           fullWidth\\r\\n           [(ngModel)]=\\\"user.email\\\"\\r\\n           #email=\\\"ngModel\\\"\\r\\n           name=\\\"email\\\"\\r\\n           id=\\\"input-email\\\"\\r\\n           pattern=\\\".+@.+\\\\..+\\\"\\r\\n           placeholder=\\\"Email address\\\"\\r\\n           autofocus\\r\\n           [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\r\\n           [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.errors?.required\\\">\\r\\n        Email is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.errors?.pattern\\\">\\r\\n        Email should be the real one!\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group\\\">\\r\\n    <label class=\\\"label\\\" for=\\\"input-password\\\">Password:</label>\\r\\n    <input nbInput\\r\\n           fullWidth\\r\\n           [(ngModel)]=\\\"user.password\\\"\\r\\n           #password=\\\"ngModel\\\"\\r\\n           name=\\\"password\\\"\\r\\n           type=\\\"password\\\"\\r\\n           id=\\\"input-password\\\"\\r\\n           placeholder=\\\"Password\\\"\\r\\n           [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\r\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\r\\n           [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\r\\n           [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\r\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\r\\n    <ng-container *ngIf=\\\"password.invalid && password.touched \\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.required\\\">\\r\\n        Password is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\r\\n        Password should contains\\r\\n        from {{ getConfigValue('forms.validation.password.minLength') }}\\r\\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\\r\\n        characters\\r\\n      </p>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"form-control-group accept-group\\\">\\r\\n    <nb-checkbox name=\\\"rememberMe\\\" [(ngModel)]=\\\"user.rememberMe\\\" *ngIf=\\\"rememberMe\\\">Remember me</nb-checkbox>\\r\\n    <a class=\\\"forgot-password\\\" routerLink=\\\"../request-password\\\">Forgot Password?</a>\\r\\n  </div>\\r\\n\\r\\n  <button nbButton\\r\\n          fullWidth\\r\\n          status=\\\"success\\\"\\r\\n          [disabled]=\\\"submitted || !form.valid\\\"\\r\\n          [class.btn-pulse]=\\\"submitted\\\">\\r\\n    Log In\\r\\n  </button>\\r\\n</form>\\r\\n\\r\\n<section *ngIf=\\\"socialLinks && socialLinks.length > 0\\\" class=\\\"links\\\" aria-label=\\\"Social sign in\\\">\\r\\n  or enter with:\\r\\n  <div class=\\\"socials\\\">\\r\\n    <ng-container *ngFor=\\\"let socialLink of socialLinks\\\">\\r\\n      <a *ngIf=\\\"socialLink.link\\\"\\r\\n         [routerLink]=\\\"socialLink.link\\\"\\r\\n         [attr.target]=\\\"socialLink.target\\\"\\r\\n         [attr.class]=\\\"socialLink.icon\\\"\\r\\n         [class.with-icon]=\\\"socialLink.icon\\\">{{ socialLink.title }}</a>\\r\\n      <a *ngIf=\\\"socialLink.url\\\"\\r\\n         [attr.href]=\\\"socialLink.url\\\"\\r\\n         [attr.target]=\\\"socialLink.target\\\"\\r\\n         [attr.class]=\\\"socialLink.icon\\\"\\r\\n         [class.with-icon]=\\\"socialLink.icon\\\">{{ socialLink.title }}</a>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n</section>\\r\\n\\r\\n<section class=\\\"another-action\\\" aria-label=\\\"Register\\\">\\r\\n  Don't have an account? <a class=\\\"text-link\\\" routerLink=\\\"../register\\\">Register</a>\\r\\n</section>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { NbLoginComponent, NbAuthJWTToken } from '@nebular/auth';\r\nimport { getParamValueQueryString } from '../../utils/utils';\r\n@Component({\r\n  selector: 'ngx-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class NgxLoginComponent extends NbLoginComponent implements OnInit {\r\n  public phoneNumberCode: number;\r\n  public phoneNumber: number;\r\n\r\n  ngOnInit() {\r\n    this.service.onTokenChange().subscribe((token) => {\r\n      if (token.isValid()) {\r\n        const returnUrl = getParamValueQueryString('returnUrl') || '/pages/dashboard';\r\n        // TODO jak to lepie zrobic\r\n        setTimeout(() => { this.router.navigate([returnUrl]); }, 1200);\r\n      }\r\n    });\r\n  }\r\n\r\n  onChange(event: any): void {\r\n    if (this.phoneNumberCode && this.phoneNumber) {\r\n      this.user.loginName = String(this.phoneNumberCode) + String(this.phoneNumber);\r\n    }\r\n  }\r\n\r\n  errorsOccurred(): boolean {\r\n    return this.showMessages.error && this.errors && (this.errors.length) > 0 && (!this.submitted);\r\n  }\r\n\r\n  loginSucceeded(): boolean {\r\n    return this.showMessages.success && this.messages && this.messages.length > 0 && !this.submitted;\r\n  }\r\n\r\n}\r\n","module.exports = \"<nb-auth-block>\\r\\n  <h2 class=\\\"title\\\">Sign Up</h2>\\r\\n  <form (ngSubmit)=\\\"register()\\\" #form=\\\"ngForm\\\" name=\\\"form\\\">\\r\\n    <div *ngIf=\\\"showMessages.error && errors && errors.length > 0 && !submitted\\\"\\r\\n         class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\r\\n      <div *ngFor=\\\"let error of errors\\\">{{ error }}</div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"showMessages.success && messages && messages.length > 0 && !submitted\\\"\\r\\n         class=\\\"alert alert-success\\\" role=\\\"alert\\\">\\r\\n      <div *ngFor=\\\"let message of messages\\\">{{ message }}</div>\\r\\n    </div>\\r\\n\\r\\n    <!--FIRST NAME-->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"firstName\\\" class=\\\"sr-only\\\">First name</label>\\r\\n      <input nbInput name=\\\"firstName\\\" [(ngModel)]=\\\"user.firstName\\\" id=\\\"firstName\\\" #firstName=\\\"ngModel\\\"\\r\\n             class=\\\"form-control\\\" placeholder=\\\"First name*\\\"\\r\\n             [class.form-control-danger]=\\\"firstName.invalid && firstName.touched\\\"\\r\\n             [required]=\\\"getConfigValue('forms.validation.firstName.required')\\\"\\r\\n             [minlength]=\\\"getConfigValue('forms.validation.firstName.minLength')\\\"\\r\\n             [maxlength]=\\\"getConfigValue('forms.validation.firstName.maxLength')\\\"\\r\\n             autofocus>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"firstName.invalid && firstName.touched && firstName.errors?.required\\\">\\r\\n        First name is required!\\r\\n      </p>\\r\\n      <p\\r\\n        class=\\\"error-message\\\"\\r\\n        *ngIf=\\\"firstName.invalid && firstName.touched && (firstName.errors?.minlength || firstName.errors?.maxlength)\\\">\\r\\n        First name should contains\\r\\n        from {{getConfigValue('forms.validation.firstName.minLength')}}\\r\\n        to {{getConfigValue('forms.validation.firstName.maxLength')}}\\r\\n        characters\\r\\n      </p>\\r\\n    </div>\\r\\n\\r\\n    <!--LAST NAME-->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"lastName\\\" class=\\\"sr-only\\\">Last name</label>\\r\\n      <input nbInput name=\\\"lastName\\\" [(ngModel)]=\\\"user.lastName\\\" id=\\\"lastName\\\" #lastName=\\\"ngModel\\\"\\r\\n             class=\\\"form-control\\\" placeholder=\\\"Last name*\\\"\\r\\n             [class.form-control-danger]=\\\"lastName.invalid && lastName.touched\\\"\\r\\n             [required]=\\\"getConfigValue('forms.validation.lastName.required')\\\"\\r\\n             [minlength]=\\\"getConfigValue('forms.validation.lastName.minLength')\\\"\\r\\n             [maxlength]=\\\"getConfigValue('forms.validation.lastName.maxLength')\\\"\\r\\n             autofocus>\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"lastName.invalid && lastName.touched && lastName.errors?.required\\\">\\r\\n        Last name is required!\\r\\n      </p>\\r\\n      <p\\r\\n        class=\\\"error-message\\\"\\r\\n        *ngIf=\\\"lastName.invalid && lastName.touched && (lastName.errors?.minlength || lastName.errors?.maxlength)\\\">\\r\\n        Last name should contains\\r\\n        from {{getConfigValue('forms.validation.lastName.minLength')}}\\r\\n        to {{getConfigValue('forms.validation.lastName.maxLength')}}\\r\\n        characters\\r\\n      </p>\\r\\n    </div>\\r\\n\\r\\n    \\r\\n\\r\\n    <!--EMAIL-->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"input-email\\\" class=\\\"sr-only\\\">Email address</label>\\r\\n      <input nbInput name=\\\"email\\\" [(ngModel)]=\\\"user.email\\\" id=\\\"input-email\\\" #email=\\\"ngModel\\\"\\r\\n             class=\\\"form-control\\\" placeholder=\\\"Email address*\\\" pattern=\\\".+@.+\\\\..+\\\"\\r\\n             [class.form-control-danger]=\\\"email.invalid && email.touched\\\"\\r\\n             [required]=\\\"getConfigValue('forms.validation.email.required')\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"email.invalid && email.touched && email.errors?.required\\\">\\r\\n        Email is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\"\\r\\n         *ngIf=\\\"email.invalid && email.touched && email.errors?.pattern\\\">\\r\\n        Email should be the real one!\\r\\n      </p>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <!--PASSWORD-->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"input-password\\\" class=\\\"sr-only\\\">Password</label>\\r\\n      <input nbInput name=\\\"password\\\" [(ngModel)]=\\\"user.password\\\" type=\\\"password\\\" id=\\\"input-password\\\"\\r\\n             class=\\\"form-control\\\" placeholder=\\\"Password*\\\" #password=\\\"ngModel\\\"\\r\\n             [class.form-control-danger]=\\\"password.invalid && password.touched\\\"\\r\\n             [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\r\\n             [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\r\\n             [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\">\\r\\n      <p class=\\\"error-message\\\" *ngIf=\\\"password.invalid && password.touched && password.errors?.required\\\">\\r\\n        Password is required!\\r\\n      </p>\\r\\n      <p\\r\\n        class=\\\"error-message\\\"\\r\\n        *ngIf=\\\"password.invalid && password.touched && (password.errors?.minlength || password.errors?.maxlength)\\\">\\r\\n        Password should contains\\r\\n        from {{ getConfigValue('forms.validation.password.minLength') }}\\r\\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\\r\\n        characters\\r\\n      </p>\\r\\n    </div>\\r\\n\\r\\n    <!--REPASSWORD-->\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <label for=\\\"input-re-password\\\" class=\\\"sr-only\\\">Repeat password</label>\\r\\n      <input nbInput\\r\\n             name=\\\"rePass\\\" [(ngModel)]=\\\"user.confirmPassword\\\" type=\\\"password\\\" id=\\\"input-re-password\\\"\\r\\n             class=\\\"form-control\\\" placeholder=\\\"Confirm Password*\\\" #rePass=\\\"ngModel\\\"\\r\\n             [class.form-control-danger]=\\\"(rePass.invalid || password.value != rePass.value) && rePass.touched\\\"\\r\\n             [required]=\\\"getConfigValue('forms.validation.password.required')\\\">\\r\\n      <p class=\\\"error-message\\\"\\r\\n         *ngIf=\\\"rePass.invalid && rePass.touched && rePass.errors?.required\\\">\\r\\n        Password confirmation is required!\\r\\n      </p>\\r\\n      <p\\r\\n        class=\\\"error-message\\\"\\r\\n        *ngIf=\\\"rePass.touched && password.value != rePass.value && !rePass.errors?.required\\\">\\r\\n        Password does not match the confirm password.\\r\\n      </p>\\r\\n    </div>\\r\\n    <button nbButton class=\\\"btn-block btn-success\\\" [disabled]=\\\"submitted || !form.valid\\\" [class.btn-pulse]=\\\"submitted\\\">\\r\\n      Register\\r\\n    </button>\\r\\n  </form>\\r\\n  <div class=\\\"links\\\">\\r\\n    <ng-container *ngIf=\\\"socialLinks && socialLinks.length > 0\\\">\\r\\n      <p class=\\\"form-text\\\">Or connect with:</p>\\r\\n      <div class=\\\"socials\\\">\\r\\n        <ng-container *ngFor=\\\"let socialLink of socialLinks\\\">\\r\\n          <a *ngIf=\\\"socialLink.link\\\"\\r\\n             [routerLink]=\\\"socialLink.link\\\"\\r\\n             [attr.target]=\\\"socialLink.target\\\"\\r\\n             [attr.class]=\\\"socialLink.icon\\\"\\r\\n             [class.with-icon]=\\\"socialLink.icon\\\">{{ socialLink.title }}</a>\\r\\n          <a *ngIf=\\\"socialLink.url\\\"\\r\\n             [attr.href]=\\\"socialLink.url\\\"\\r\\n             [attr.target]=\\\"socialLink.target\\\"\\r\\n             [attr.class]=\\\"socialLink.icon\\\"\\r\\n             [class.with-icon]=\\\"socialLink.icon\\\">{{ socialLink.title }}</a>\\r\\n        </ng-container>\\r\\n      </div>\\r\\n    </ng-container>\\r\\n    <p class=\\\"form-text\\\">\\r\\n      Already have an account? <a routerLink=\\\"../login\\\"><strong>Sign in</strong></a>\\r\\n    </p>\\r\\n  </div>\\r\\n</nb-auth-block>\\r\\n\"","import {ChangeDetectorRef, Component, Inject, OnInit} from '@angular/core';\r\nimport {NB_AUTH_OPTIONS, NbAuthService, NbRegisterComponent} from '@nebular/auth';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'ngx-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class NgxRegisterComponent extends NbRegisterComponent implements OnInit {\r\n\r\n  public phoneNumberCode: number;\r\n  public phoneNumber: number;\r\n\r\n  constructor(\r\n              protected readonly service: NbAuthService,\r\n              @Inject(NB_AUTH_OPTIONS) protected readonly options = {},\r\n              protected cd: ChangeDetectorRef,\r\n              protected readonly router: Router) {\r\n    super(service, options, cd, router);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n\r\n\r\n  public onChange(event: any): void {\r\n    if (this.phoneNumber && this.phoneNumberCode) {\r\n      this.user.phoneNumber = String(this.phoneNumberCode) + String(this.phoneNumber);\r\n    }\r\n  }\r\n}\r\n","module.exports = \"<nb-auth-block>\\r\\n  <h2 class=\\\"title\\\">Forgot Password</h2>\\r\\n  <p class=\\\"sub-title\\\">If you have forgotten your password, please enter your phone number and press\\r\\n    \\\"Reset password\\\" button. The new password will be sent by SMS\\r\\n  </p>\\r\\n  <form (ngSubmit)=\\\"requestPass()\\\" #requestPassForm=\\\"ngForm\\\">\\r\\n    <div *ngIf=\\\"showMessages.error && errors && errors.length > 0 && !submitted\\\"\\r\\n         class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\\r\\n      <div *ngFor=\\\"let error of errors\\\">{{ error }}</div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"showMessages.success && messages && messages.length > 0 && !submitted\\\"\\r\\n         class=\\\"alert alert-success\\\" role=\\\"alert\\\">\\r\\n      <div *ngFor=\\\"let message of messages\\\">{{ message }}</div>\\r\\n    </div>\\r\\n    <div class=\\\"form-row form-group\\\">\\r\\n      <div class=\\\"col-md-2\\\">\\r\\n        <input nbInput name=\\\"phoneNumberCode\\\" size=\\\"2\\\" [(ngModel)]=\\\"phoneNumberCode\\\" (ngModelChange)=\\\"onChange($event)\\\"\\r\\n               id=\\\"input-phone-number-code\\\" type=\\\"tel\\\" pattern=\\\"[0-9]{2}\\\"\\r\\n               class=\\\"form-control\\\" #numberC=\\\"ngModel\\\" autocomplete=\\\"off\\\"\\r\\n               [class.form-control-danger]=\\\"numberC.invalid && numberC.touched\\\" autofocus\\r\\n               [required]=\\\"getConfigValue('forms.validation.number.required')\\\">\\r\\n      </div>\\r\\n      <div class=\\\"col-md-10\\\">\\r\\n        <input nbInput name=\\\"phoneNumber\\\" [(ngModel)]=\\\"phoneNumber\\\" (ngModelChange)=\\\"onChange($event)\\\"\\r\\n               id=\\\"input-phone-number\\\"\\r\\n               type=\\\"tel\\\" pattern=\\\"[0-9]{9}\\\"\\r\\n               class=\\\"form-control\\\" placeholder=\\\"Phone number*\\\" #number=\\\"ngModel\\\"\\r\\n               [class.form-control-danger]=\\\"number.invalid && number.touched\\\"\\r\\n               [required]=\\\"getConfigValue('forms.validation.number.required')\\\">\\r\\n      </div>\\r\\n      <p class=\\\"error-message\\\"\\r\\n         *ngIf=\\\"(number.invalid && number.touched && number.errors?.required)||(numberC.invalid && numberC.touched && numberC.errors?.required)\\\">\\r\\n        Phone number is required!\\r\\n      </p>\\r\\n      <p class=\\\"error-message\\\"\\r\\n         *ngIf=\\\"(number.invalid && number.touched && number.errors?.pattern) || (numberC.invalid && numberC.touched && numberC.errors?.pattern)\\\">\\r\\n        Phone number should be the real one!\\r\\n      </p>\\r\\n    </div>\\r\\n    <button nbButton class=\\\"btn-block btn-success\\\" [disabled]=\\\"submitted || !requestPassForm.form.valid\\\"\\r\\n            [class.btn-pulse]=\\\"submitted\\\">\\r\\n      Reset password\\r\\n    </button>\\r\\n  </form>\\r\\n  <div class=\\\"links col-sm-12\\\">\\r\\n    <p class=\\\"form-text\\\">\\r\\n      Already have an account? <a routerLink=\\\"../login\\\"><strong>Sign In</strong></a>\\r\\n    </p>\\r\\n    <p class=\\\"form-text\\\">\\r\\n      <a routerLink=\\\"../register\\\"><strong>Sign Up</strong></a>\\r\\n    </p>\\r\\n  </div>\\r\\n</nb-auth-block>\\r\\n\"","import {Component} from '@angular/core';\r\nimport {NbRequestPasswordComponent} from '@nebular/auth';\r\n\r\n@Component({\r\n  selector: 'ngx-request-password-page',\r\n  templateUrl: './reset-password.component.html',\r\n})\r\nexport class NgxResetPasswordComponent extends NbRequestPasswordComponent {\r\n  public phoneNumberCode: number;\r\n  public phoneNumber: number;\r\n\r\n  public onChange(event: any): void {\r\n    if (this.phoneNumber && this.phoneNumberCode) {\r\n      this.user.loginName = String(this.phoneNumberCode) + String(this.phoneNumber);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}